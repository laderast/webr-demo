---
title: "WebR: Why, What, How"
subtitle: "PDX-R Meetup"
date: 5/15/2024
author: Ted Laderas
engine: knitr
filters: 
  - webr
format:
  revealjs:
    auto-stretch: false
    incremental: true
    footer: https://laderast.github.io/webr-demo
    resources:
      - data/*
webr:
  packages: ['ggplot2', 'dplyr', 'palmerpenguins', 'hexbin']
  
---

## This Presentation

After this presentation, you will be able to

- **Articulate** *what* WebR is and how it lets your run in the browser
- **Explain** *why* to use WebR in your educational work
- **Utilize** WebR in your presentations and web pages (*how*)

```{webr-r}
#| context: setup
library(dplyr)
library(ggplot2)
library(palmerpenguins)
```

## What is WebR?

```{webr-r}
ggplot(diamonds, aes(x=cut, y=carat, 
                     fill=cut)) +
  geom_boxplot()
```

## Why WebR?

- Education
- Internal Websites 
- Shinylive (Shiny without Shiny Server)

## How does WebR work?

- Browsers include WebAssembly and JavaScript
- Webpages use Javascript to execute WebR scripts
- Results are returned within a `<div>`
  - Special R canvas called HTML

## This is a huge accomplishment {background-color="black"}

![](111-002.png){width="60%"}
[Source: Bob Rudis' WebR Talk](https://rud.is/w/2023-nyr-webr/#/now)

## WebR Worker

- WebR launches a **worker process** in browser
- Uses JavaScript to communicate between web page and worker
- Everything is run in the browser

## Where to read about WebR?

### WebR documentation

- Very technical
- Specifies how to get JS to interact with WebR in a web page
- Asynchronous evaluation
- **Made for developers**

## Recommended for Users: Quarto/WebR documentation

- By James Balamuta and company
- [Quarto WebR documentation](https://quarto-webr.thecoatlessprofessor.com/)
- Quarto/WebR extension
- Handles the communication between JS and WebR
- Don't worry!

# Getting started with Quarto/WebR

## First, Create a Project
File >> New Project >> New Folder >> Quarto Website

```bash
├── _quarto.yml
├── _site
├── about.qmd
├── index.qmd
├── styles.css
└── webr-demo.Rproj
```

## Next, install Quarto Extension in Project

- In the RStudio Terminal Window:

```bash
quarto add coatless/quarto-webr
```

This folder will be installed in your project:

```bash
├── _extensions
│   └── coatless
│       └── webr  ## Contains a lot of JavaScript
```

# Quarto/WebR Setup

## Quarto/WebR Setup {auto-animate="true"}
```{markdown}
#| echo: true
title: "My WebR Demo"
format: html
engine: knitr
```

- Start like usual 
- Specify `engine: knitr`

## Quarto/WebR Setup {auto-animate="true"}
```{markdown}
#| echo: true
#| code-line-numbers: "4-5"
title: "My WebR Demo"
format: html
engine: knitr
filters:                     
  - webr                     
```
- Need to use `filters` with `- webr` option


## Quarto/WebR Setup {auto-animate="true"}
```{markdown}
#| echo: true
#| code-line-numbers: "6-7"
title: "My WebR Demo"
format: html
engine: knitr
filters:                         
  - webr                         
webr:                            
  packages: ['ggplot2', 'dplyr', 'palmerpenguins']
```

- `webr` is where you set options:
    - `packages:` to install
    - `base-url:` to change WebR repository
    - `cell-options:` to set default code window options


## A Note about Packages

- Packages need to be compiled for WebAssembly
  - [`{rwasm}` package](https://github.com/r-wasm/rwasm)
  - Need to solve dependencies
- [Using R Packages in WebR](https://quarto-webr.thecoatlessprofessor.com/qwebr-using-r-packages.html)
  - Can install in realtime or using the `webr::install()` option

## Not all dependencies

- [WebR Compiled Packages](https://repo.r-wasm.org/)
  - Default repository for packages (19532+ compiled, but not everything)
- Some packages don't have all dependencies compiled
  - Example: Bioconductor (Biobase) is not compiled

# Add Your Code Blocks

## Quarto/WebR Block {auto-animate="true"}

```{{webr-r}}
library(palmerpenguins)
table(penguins$island)
```

## Quarto/WebR Block {auto-animate="true"}

```{{webr-r}}
library(palmerpenguins)
table(penguins$island)
```

This becomes: 

```{webr-r}
library(palmerpenguins)
table(penguins$island)
```

## `context: setup`

[`context: setup`](https://quarto-webr.thecoatlessprofessor.com/qwebr-internal-cell.html#hidden-loading-of-a-dataset) - Pre-load data, load packages, for use globally

```{{webr-r}}
#| context: setup

library(dplyr)
library(ggplot2)
library(penguins)
```

## `context: output`

Show only output, not execution cell

```{{webr-r}}
#| context: output

table(penguins$species)
```

## `context: output`

```{webr-r}
#| context: output

table(penguins$species)
```

# Education Example

## Adding Layers

Add another layer to the below plot by appending a `geom_point(aes(color=species))` to it. 

```{webr-r}
#| warning: false
ggplot(penguins) +
  aes(x=bill_length_mm, y=bill_depth_mm) +
  geom_hex() + ---------
```

## What about files?

- There is a filesystem that is created
  - emscripten filesystem
- Not super easy to get stuff in
- Distinct from your project
  - can't see anything in your directory

## Options to get data in

- Data packages
- Serve data at a URL
  - URL needs to be `https://`
  - `download.file()`
- 

## Getting data in from a URL

For teaching, put in a `context: setup` chunk:

```{webr-r}
list.files()
url <- 'https://laderast.github.io/webr-demo/data/penguins.csv'
download.file(url, 'penguins.csv')
list.files()
```

## Loading data in the filesystem

```{webr-r}
penguins2 <- read.csv("penguins.csv")
penguins2 |>
  count(species)
```

## `rwasm::file_packager()`

- Lets you package a folder into a filesystem
- Still needs to be hosted somewhere

## Deployment

- You will need a web server to deploy your WebR page
- Do not need a Shiny server, just something that serves HTML 
- Browser needs internet access to download packages
- All computations are done in the browser


## Deployment

- Can use github pages:

  ```bash
  quarto publish gh-pages ./
  ```
- Netlify

  ```bash
  quarto publish netlify ./
  ```

# Netlify Drop Demo


## What about Shiny?

[Shinylive](https://shinylive.io/r/examples/)


## Resources

- [WebR Filesystem (Bob Rudis)](https://rud.is/w/fs/)
- [Teaching with WebR - Nicola Rennie](https://nrennie.rbind.io/teaching-with-webR/#/title-slide)
- [Bob Rudis' WebR Talk](https://rud.is/w/2023-nyr-webr/) - much more about the indepth details of WebR
- [Quarto/WebR extension](https://quarto-webr.thecoatlessprofessor.com/) - What I've been talking about
- [WebR Developer Resources](https://quarto-webr.thecoatlessprofessor.com/qwebr-developer-resources.html)


## Keep in Touch

- <https://elk.vmst.io/vmst.io/@tladeras>
- tedladeras at gmail
- <https://laderast.github.io>